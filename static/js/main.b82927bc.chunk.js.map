{"version":3,"sources":["components/Quote/index.js","containers/QuoteContainer.js","App.js","serviceWorker.js","index.js"],"names":["Quote","loading","this","props","react_default","a","createElement","className","category","class","quote","author","React","Component","QuoteContainer","_React$Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","_this2","axios","get","then","response","quoteResponse","data","console","log","setState","content","tags","catch","error","Quote_Quote","App","QuoteContainer_QuoteContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAEqBA,mLAEjB,IAAIC,EAAUC,KAAKC,MAAMF,QACzB,OACEG,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeL,KAAKC,MAAMK,SAAxC,qBACAJ,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,OAAKG,MAAOR,EAAU,UAAY,UAChCG,EAAAC,EAAAC,cAAA,OAAKG,MAAM,gBACXL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,8BACXL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,8BACXL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,+BAEZP,KAAKC,MAAMO,OAEZN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKG,MAAOR,EAAU,UAAY,UAChCG,EAAAC,EAAAC,cAAA,OAAKG,MAAM,+BAEZP,KAAKC,MAAMF,QAAU,GAAK,IAJ3B,IAIiCC,KAAKC,MAAMQ,gBAnBjBC,IAAMC,WCI5BC,EAAb,SAAAC,GACE,SAAAD,EAAYX,GAAM,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAY,IAChBE,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAnB,KAAMC,KACDmB,MAAQ,CACXX,OAAO,GACPD,MAAM,GACNF,SAAS,GACTP,SAAQ,GANMe,EADpB,OAAAC,OAAAM,EAAA,EAAAN,CAAAH,EAAAC,GAAAE,OAAAO,EAAA,EAAAP,CAAAH,EAAA,EAAAW,IAAA,qBAAAC,MAAA,eAAAD,IAAA,oBAAAC,MAAA,WAaqB,IAAAC,EAAAzB,KAEjB0B,IACEC,IAFU,kCAGVC,KAAK,SAAAC,GACJ,IAAIC,EAAgBD,EAASE,KAC7BC,QAAQC,IAAIH,GACZL,EAAKS,SAAS,CACZnC,SAAQ,EACRU,OAAOqB,EAAcrB,OACrBD,MAAMsB,EAAcK,QACpB7B,SAASwB,EAAcM,KAAK,OAG/BC,MAAM,SAAAC,GAAK,OAAIN,QAAQC,IAAIK,OA3BjC,CAAAf,IAAA,SAAAC,MAAA,WA8BM,OACEtB,EAAAC,EAAAC,cAACmC,EAAD,CAAOxC,QAASC,KAAKoB,MAAMrB,QAASU,OAAQT,KAAKoB,MAAMX,OAAQD,MAAOR,KAAKoB,MAAMZ,MAAOF,SAAUN,KAAKoB,MAAMd,eA/BrHM,EAAA,CAAoCF,IAAMC,WCQ3B6B,mLARX,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqC,EAAD,cAJU9B,aCQE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.b82927bc.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Quote extends React.Component{\n  render(){\n    let loading = this.props.loading;\n    return(\n      <section className=\"quote-wrapper\">\n        <h2 className=\"quote-title\">{this.props.category} Quote of the day</h2>\n        <blockquote>\n        <div class={loading ? \"loading\" : \"loaded\"}>\n          <div class=\"loader-line\"></div>\n          <div class=\"loader-line loader-line-2\"></div>\n          <div class=\"loader-line loader-line-3\"></div>\n          <div class=\"loader-line loader-line-4\"></div>\n        </div>\n        {this.props.quote}\n        </blockquote>\n        <p className=\"author\">\n        <div class={loading ? \"loading\" : \"loaded\"}>\n          <div class=\"loader-line loader-line-4\"></div>\n        </div>\n        {this.props.loading ? \"\" : \"-\"} {this.props.author}</p>\n      </section>\n    )\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport Quote from '../components/Quote/';\n\n\n\nexport class QuoteContainer extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      author:\"\",\n      quote:\"\",\n      category:\"\",\n      loading:true\n    };\n  }\n  componentwillMount(){\n\n  }\n  componentDidMount(){\n    const url = \"https://api.quotable.io/random\";\n    axios\n     .get(url)\n     .then(response => {\n       let quoteResponse = response.data;\n       console.log(quoteResponse);\n       this.setState({\n         loading:false,\n         author:quoteResponse.author,\n         quote:quoteResponse.content,\n         category:quoteResponse.tags[0],\n       })\n     })\n     .catch(error => console.log(error));\n  }\n  render(){\n      return(\n        <Quote loading={this.state.loading} author={this.state.author} quote={this.state.quote} category={this.state.category}/>\n      );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { QuoteContainer } from './containers/QuoteContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <QuoteContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}